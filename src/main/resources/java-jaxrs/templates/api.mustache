package {{package}};

import com.wordnik.swagger.annotations.*;
import com.wordnik.swagger.jaxrs.PATCH;

{{#imports}}import {{import}};
{{/imports}}

import java.io.InputStream;

import java.util.List;
import java.io.File;

import {{package}}.NotFoundException;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import javax.ws.rs.core.*;
import javax.ws.rs.*;

@Path("/{{baseName}}")
@Api(value = "/{{baseName}}", description = "the {{baseName}} API")
public class {{className}} {
  {{#operations}}
  {{#operation}}
  @{{httpMethod}}
  @Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}},{{/hasMore}}{{/consumes}} })
  @Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}},{{/hasMore}}{{/produces}} })
  @Path("{{path}}")
  @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}"{{#returnType}},
    response = {{#returnSimpleType}}{{returnType}}{{/returnSimpleType}}{{#returnContainer}}{{returnBaseType}}{{/returnContainer}}.class{{#returnContainer}}, responseContainer="{{returnContainer}}"{{/returnContainer}}{{/returnType}})
  @ApiResponses(value = { {{#errorList}} @ApiResponse(code = {{{code}}}, message = "{{{reason}}}"){{#hasMore}},{{/hasMore}}
  {{/errorList}} 
      })
     
  public Response {{nickname}}(
    {{#allParams}}
    {{#queryParameter}}
    @ApiParam(value = "{{{description}}}"
    {{#required}},required=true{{newline}}{{/required}}
    {{#allowableValues}}, allowableValues="{{{allowableValues}}}"{{newline}}{{/allowableValues}}
    {{#defaultValue}}, defaultValue="{{{defaultValue}}}"{{newline}}{{/defaultValue}}

    )@QueryParam("{{paramName}}"){{newline}} {{{dataType}}} {{paramName}}
    {{/queryParameter}}

    {{#pathParameter}}
    @ApiParam(value = "{{{description}}}"
    {{#required}},required=true{{newline}}{{/required}}
    {{#allowableValues}}, allowableValues="{{{allowableValues}}}"{{newline}}{{/allowableValues}}
    {{#defaultValue}}, defaultValue="{{{defaultValue}}}"{{newline}}{{/defaultValue}}

    )@PathParam("{{paramName}}"){{newline}} {{{dataType}}} {{paramName}}
    {{/pathParameter}}


    {{#formParameter}}
    @ApiParam(value = "{{{description}}}"
    {{#required}},required=true{{newline}}{{/required}}
    {{#allowableValues}}, allowableValues="{{{allowableValues}}}"{{newline}}{{/allowableValues}}
    {{#defaultValue}}, defaultValue="{{{defaultValue}}}"{{newline}}{{/defaultValue}}

    )@FormDataParam("{{paramName}}"){{newline}} {{{dataType}}} {{paramName}}
    {{/formParameter}}

    {{#headerParameter}}
    @ApiParam(value = "{{{description}}}"
    {{#required}},required=true{{newline}}{{/required}}
    {{#allowableValues}}, allowableValues="{{{allowableValues}}}"{{newline}}{{/allowableValues}}
    {{#defaultValue}}, defaultValue="{{{defaultValue}}}"{{newline}}{{/defaultValue}}

    )@HeaderParam("{{paramName}}"){{newline}} {{{dataType}}} {{paramName}}
    {{/headerParameter}}

    {{#bodyParameter}}
    @ApiParam(value = "{{{description}}}"
    {{#required}},required=true{{newline}}{{/required}}
    {{#allowableValues}}, allowableValues="{{{allowableValues}}}"{{newline}}{{/allowableValues}}
    {{#defaultValue}}, defaultValue="{{{defaultValue}}}"{{newline}}{{/defaultValue}}

    ) {{{dataType}}} {{paramName}}
    {{/bodyParameter}}


    {{#hasMore}},{{/hasMore}}
    {{/allParams}}

  )
    throws NotFoundException {
    {{>serviceCall}}
  }

  {{/operation}}
  {{/operations}}
}
